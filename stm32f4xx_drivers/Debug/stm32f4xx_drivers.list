
stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000c10  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000db8  08000db8  00020034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000db8  08000db8  00020034  2**0
                  CONTENTS
  4 .ARM          00000000  08000db8  08000db8  00020034  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000db8  08000db8  00020034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000db8  08000db8  00010db8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000dbc  08000dbc  00010dbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000034  20000000  08000dc0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000044  20000034  08000df4  00020034  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000078  08000df4  00020078  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000198c  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000004fb  00000000  00000000  000219f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000150  00000000  00000000  00021ef0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000118  00000000  00000000  00022040  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000029af  00000000  00000000  00022158  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00001378  00000000  00000000  00024b07  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0000a94d  00000000  00000000  00025e7f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000307cc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000488  00000000  00000000  00030848  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000034 	.word	0x20000034
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08000da0 	.word	0x08000da0

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000038 	.word	0x20000038
 80001e4:	08000da0 	.word	0x08000da0

080001e8 <strlen>:
 80001e8:	4603      	mov	r3, r0
 80001ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ee:	2a00      	cmp	r2, #0
 80001f0:	d1fb      	bne.n	80001ea <strlen+0x2>
 80001f2:	1a18      	subs	r0, r3, r0
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr

080001f8 <delay>:
#define MY_ADDR 0x61;

#define SLAVE_ADDR  0x68

void delay(void)
{
 80001f8:	b480      	push	{r7}
 80001fa:	b083      	sub	sp, #12
 80001fc:	af00      	add	r7, sp, #0
	for(uint32_t i = 0 ; i < 500000/2 ; i ++);
 80001fe:	2300      	movs	r3, #0
 8000200:	607b      	str	r3, [r7, #4]
 8000202:	e002      	b.n	800020a <delay+0x12>
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	3301      	adds	r3, #1
 8000208:	607b      	str	r3, [r7, #4]
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	4a04      	ldr	r2, [pc, #16]	; (8000220 <delay+0x28>)
 800020e:	4293      	cmp	r3, r2
 8000210:	d9f8      	bls.n	8000204 <delay+0xc>
}
 8000212:	bf00      	nop
 8000214:	370c      	adds	r7, #12
 8000216:	46bd      	mov	sp, r7
 8000218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop
 8000220:	0003d08f 	.word	0x0003d08f

08000224 <I2C1_GPIOInits>:
 * PB6-> SCL
 * PB9 or PB7 -> SDA
 */

void I2C1_GPIOInits(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	b084      	sub	sp, #16
 8000228:	af00      	add	r7, sp, #0
	GPIO_Handle_t I2CPins;

	/*Note : Internal pull-up resistors are used */

	I2CPins.pGPIOx = GPIOB;
 800022a:	4b0e      	ldr	r3, [pc, #56]	; (8000264 <I2C1_GPIOInits+0x40>)
 800022c:	607b      	str	r3, [r7, #4]
	I2CPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 800022e:	2302      	movs	r3, #2
 8000230:	727b      	strb	r3, [r7, #9]
	I2CPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
 8000232:	2301      	movs	r3, #1
 8000234:	733b      	strb	r3, [r7, #12]
	/*
	 * Note : In the below line use GPIO_NO_PUPD option if you want to use external pullup resistors, then you have to use 3.3K pull up resistors
	 * for both SDA and SCL lines
	 */
	I2CPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 8000236:	2301      	movs	r3, #1
 8000238:	72fb      	strb	r3, [r7, #11]
	I2CPins.GPIO_PinConfig.GPIO_PinAltFunMode = 4;
 800023a:	2304      	movs	r3, #4
 800023c:	737b      	strb	r3, [r7, #13]
	I2CPins. GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 800023e:	2302      	movs	r3, #2
 8000240:	72bb      	strb	r3, [r7, #10]

	//scl
	I2CPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_6;
 8000242:	2306      	movs	r3, #6
 8000244:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&I2CPins);
 8000246:	1d3b      	adds	r3, r7, #4
 8000248:	4618      	mov	r0, r3
 800024a:	f000 f97b 	bl	8000544 <GPIO_Init>


	//sda
	//Note : since we found a glitch on PB9 , you can also try with PB7
	I2CPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_9;
 800024e:	2309      	movs	r3, #9
 8000250:	723b      	strb	r3, [r7, #8]

	GPIO_Init(&I2CPins);
 8000252:	1d3b      	adds	r3, r7, #4
 8000254:	4618      	mov	r0, r3
 8000256:	f000 f975 	bl	8000544 <GPIO_Init>


}
 800025a:	bf00      	nop
 800025c:	3710      	adds	r7, #16
 800025e:	46bd      	mov	sp, r7
 8000260:	bd80      	pop	{r7, pc}
 8000262:	bf00      	nop
 8000264:	40020400 	.word	0x40020400

08000268 <I2C1_Inits>:

void I2C1_Inits(void)
{
 8000268:	b580      	push	{r7, lr}
 800026a:	af00      	add	r7, sp, #0
	I2C1Handle.pI2Cx = I2C1;
 800026c:	4b09      	ldr	r3, [pc, #36]	; (8000294 <I2C1_Inits+0x2c>)
 800026e:	4a0a      	ldr	r2, [pc, #40]	; (8000298 <I2C1_Inits+0x30>)
 8000270:	601a      	str	r2, [r3, #0]
	I2C1Handle.I2C_Config.I2C_AckControl = I2C_ACK_ENABLE;
 8000272:	4b08      	ldr	r3, [pc, #32]	; (8000294 <I2C1_Inits+0x2c>)
 8000274:	2201      	movs	r2, #1
 8000276:	725a      	strb	r2, [r3, #9]
	I2C1Handle.I2C_Config.I2C_DeviceAddress = MY_ADDR;
 8000278:	4b06      	ldr	r3, [pc, #24]	; (8000294 <I2C1_Inits+0x2c>)
 800027a:	2261      	movs	r2, #97	; 0x61
 800027c:	721a      	strb	r2, [r3, #8]
	I2C1Handle.I2C_Config.I2C_FMDutyCycle = I2C_FM_DUTY_2;
 800027e:	4b05      	ldr	r3, [pc, #20]	; (8000294 <I2C1_Inits+0x2c>)
 8000280:	2200      	movs	r2, #0
 8000282:	729a      	strb	r2, [r3, #10]
	I2C1Handle.I2C_Config.I2C_SCLSpeed = I2C_SCL_SPEED_SM;
 8000284:	4b03      	ldr	r3, [pc, #12]	; (8000294 <I2C1_Inits+0x2c>)
 8000286:	4a05      	ldr	r2, [pc, #20]	; (800029c <I2C1_Inits+0x34>)
 8000288:	605a      	str	r2, [r3, #4]

	I2C_Init(&I2C1Handle);
 800028a:	4802      	ldr	r0, [pc, #8]	; (8000294 <I2C1_Inits+0x2c>)
 800028c:	f000 fc2a 	bl	8000ae4 <I2C_Init>

}
 8000290:	bf00      	nop
 8000292:	bd80      	pop	{r7, pc}
 8000294:	20000050 	.word	0x20000050
 8000298:	40005400 	.word	0x40005400
 800029c:	000186a0 	.word	0x000186a0

080002a0 <GPIO_ButtonInit>:

void GPIO_ButtonInit(void)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b084      	sub	sp, #16
 80002a4:	af00      	add	r7, sp, #0
	GPIO_Handle_t GPIOBtn;

	//this is btn gpio configuration
	GPIOBtn.pGPIOx = GPIOA;
 80002a6:	4b09      	ldr	r3, [pc, #36]	; (80002cc <GPIO_ButtonInit+0x2c>)
 80002a8:	607b      	str	r3, [r7, #4]
	GPIOBtn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_0;
 80002aa:	2300      	movs	r3, #0
 80002ac:	723b      	strb	r3, [r7, #8]
	GPIOBtn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 80002ae:	2300      	movs	r3, #0
 80002b0:	727b      	strb	r3, [r7, #9]
	GPIOBtn.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 80002b2:	2302      	movs	r3, #2
 80002b4:	72bb      	strb	r3, [r7, #10]
	GPIOBtn.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 80002b6:	2300      	movs	r3, #0
 80002b8:	72fb      	strb	r3, [r7, #11]

	GPIO_Init(&GPIOBtn);
 80002ba:	1d3b      	adds	r3, r7, #4
 80002bc:	4618      	mov	r0, r3
 80002be:	f000 f941 	bl	8000544 <GPIO_Init>

}
 80002c2:	bf00      	nop
 80002c4:	3710      	adds	r7, #16
 80002c6:	46bd      	mov	sp, r7
 80002c8:	bd80      	pop	{r7, pc}
 80002ca:	bf00      	nop
 80002cc:	40020000 	.word	0x40020000

080002d0 <main>:


int main(void)
{
 80002d0:	b580      	push	{r7, lr}
 80002d2:	af00      	add	r7, sp, #0

	GPIO_ButtonInit();
 80002d4:	f7ff ffe4 	bl	80002a0 <GPIO_ButtonInit>

	//i2c pin inits
	I2C1_GPIOInits();
 80002d8:	f7ff ffa4 	bl	8000224 <I2C1_GPIOInits>

	//i2c peripheral configuration
	I2C1_Inits();
 80002dc:	f7ff ffc4 	bl	8000268 <I2C1_Inits>

	//enable the i2c peripheral
	I2C_PeripheralControl(I2C1,ENABLE);
 80002e0:	2101      	movs	r1, #1
 80002e2:	480b      	ldr	r0, [pc, #44]	; (8000310 <main+0x40>)
 80002e4:	f000 fb2a 	bl	800093c <I2C_PeripheralControl>

	while(1)
	{
		//wait till button is pressed
		while( ! GPIO_ReadFromInputPin(GPIOA,GPIO_PIN_NO_0) );
 80002e8:	bf00      	nop
 80002ea:	2100      	movs	r1, #0
 80002ec:	4809      	ldr	r0, [pc, #36]	; (8000314 <main+0x44>)
 80002ee:	f000 fac9 	bl	8000884 <GPIO_ReadFromInputPin>
 80002f2:	4603      	mov	r3, r0
 80002f4:	2b00      	cmp	r3, #0
 80002f6:	d0f8      	beq.n	80002ea <main+0x1a>

		//to avoid button de-bouncing related issues 200ms of delay
		delay();
 80002f8:	f7ff ff7e 	bl	80001f8 <delay>

		//send some data to the slave
		I2C_MasterSendData(&I2C1Handle,some_data,strlen((char*)some_data),SLAVE_ADDR);
 80002fc:	4806      	ldr	r0, [pc, #24]	; (8000318 <main+0x48>)
 80002fe:	f7ff ff73 	bl	80001e8 <strlen>
 8000302:	4602      	mov	r2, r0
 8000304:	2368      	movs	r3, #104	; 0x68
 8000306:	4904      	ldr	r1, [pc, #16]	; (8000318 <main+0x48>)
 8000308:	4804      	ldr	r0, [pc, #16]	; (800031c <main+0x4c>)
 800030a:	f000 fcc3 	bl	8000c94 <I2C_MasterSendData>
		while( ! GPIO_ReadFromInputPin(GPIOA,GPIO_PIN_NO_0) );
 800030e:	e7eb      	b.n	80002e8 <main+0x18>
 8000310:	40005400 	.word	0x40005400
 8000314:	40020000 	.word	0x40020000
 8000318:	20000000 	.word	0x20000000
 800031c:	20000050 	.word	0x20000050

08000320 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000320:	480d      	ldr	r0, [pc, #52]	; (8000358 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000322:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000324:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000328:	480c      	ldr	r0, [pc, #48]	; (800035c <LoopForever+0x6>)
  ldr r1, =_edata
 800032a:	490d      	ldr	r1, [pc, #52]	; (8000360 <LoopForever+0xa>)
  ldr r2, =_sidata
 800032c:	4a0d      	ldr	r2, [pc, #52]	; (8000364 <LoopForever+0xe>)
  movs r3, #0
 800032e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000330:	e002      	b.n	8000338 <LoopCopyDataInit>

08000332 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000332:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000334:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000336:	3304      	adds	r3, #4

08000338 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000338:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800033a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800033c:	d3f9      	bcc.n	8000332 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800033e:	4a0a      	ldr	r2, [pc, #40]	; (8000368 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000340:	4c0a      	ldr	r4, [pc, #40]	; (800036c <LoopForever+0x16>)
  movs r3, #0
 8000342:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000344:	e001      	b.n	800034a <LoopFillZerobss>

08000346 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000346:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000348:	3204      	adds	r2, #4

0800034a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800034a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800034c:	d3fb      	bcc.n	8000346 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800034e:	f000 fd03 	bl	8000d58 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000352:	f7ff ffbd 	bl	80002d0 <main>

08000356 <LoopForever>:

LoopForever:
    b LoopForever
 8000356:	e7fe      	b.n	8000356 <LoopForever>
  ldr   r0, =_estack
 8000358:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800035c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000360:	20000034 	.word	0x20000034
  ldr r2, =_sidata
 8000364:	08000dc0 	.word	0x08000dc0
  ldr r2, =_sbss
 8000368:	20000034 	.word	0x20000034
  ldr r4, =_ebss
 800036c:	20000078 	.word	0x20000078

08000370 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000370:	e7fe      	b.n	8000370 <ADC_IRQHandler>
	...

08000374 <GPIO_PeriClockControl>:


/*Peripheral Clock Setup */

void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 8000374:	b480      	push	{r7}
 8000376:	b083      	sub	sp, #12
 8000378:	af00      	add	r7, sp, #0
 800037a:	6078      	str	r0, [r7, #4]
 800037c:	460b      	mov	r3, r1
 800037e:	70fb      	strb	r3, [r7, #3]
	if(EnorDi==ENABLE)
 8000380:	78fb      	ldrb	r3, [r7, #3]
 8000382:	2b01      	cmp	r3, #1
 8000384:	d162      	bne.n	800044c <GPIO_PeriClockControl+0xd8>
	{
		if(pGPIOx==GPIOA)
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	4a64      	ldr	r2, [pc, #400]	; (800051c <GPIO_PeriClockControl+0x1a8>)
 800038a:	4293      	cmp	r3, r2
 800038c:	d106      	bne.n	800039c <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 800038e:	4b64      	ldr	r3, [pc, #400]	; (8000520 <GPIO_PeriClockControl+0x1ac>)
 8000390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000392:	4a63      	ldr	r2, [pc, #396]	; (8000520 <GPIO_PeriClockControl+0x1ac>)
 8000394:	f043 0301 	orr.w	r3, r3, #1
 8000398:	6313      	str	r3, [r2, #48]	; 0x30
		}else if(pGPIOx==GPIOI)
		{
			GPIOI_PCLK_DN();
		}
	}
}
 800039a:	e0b9      	b.n	8000510 <GPIO_PeriClockControl+0x19c>
		}else if(pGPIOx==GPIOB)
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	4a61      	ldr	r2, [pc, #388]	; (8000524 <GPIO_PeriClockControl+0x1b0>)
 80003a0:	4293      	cmp	r3, r2
 80003a2:	d106      	bne.n	80003b2 <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 80003a4:	4b5e      	ldr	r3, [pc, #376]	; (8000520 <GPIO_PeriClockControl+0x1ac>)
 80003a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003a8:	4a5d      	ldr	r2, [pc, #372]	; (8000520 <GPIO_PeriClockControl+0x1ac>)
 80003aa:	f043 0302 	orr.w	r3, r3, #2
 80003ae:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003b0:	e0ae      	b.n	8000510 <GPIO_PeriClockControl+0x19c>
		}else if(pGPIOx==GPIOC)
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	4a5c      	ldr	r2, [pc, #368]	; (8000528 <GPIO_PeriClockControl+0x1b4>)
 80003b6:	4293      	cmp	r3, r2
 80003b8:	d106      	bne.n	80003c8 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 80003ba:	4b59      	ldr	r3, [pc, #356]	; (8000520 <GPIO_PeriClockControl+0x1ac>)
 80003bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003be:	4a58      	ldr	r2, [pc, #352]	; (8000520 <GPIO_PeriClockControl+0x1ac>)
 80003c0:	f043 0304 	orr.w	r3, r3, #4
 80003c4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003c6:	e0a3      	b.n	8000510 <GPIO_PeriClockControl+0x19c>
		}else if(pGPIOx==GPIOD)
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	4a58      	ldr	r2, [pc, #352]	; (800052c <GPIO_PeriClockControl+0x1b8>)
 80003cc:	4293      	cmp	r3, r2
 80003ce:	d106      	bne.n	80003de <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 80003d0:	4b53      	ldr	r3, [pc, #332]	; (8000520 <GPIO_PeriClockControl+0x1ac>)
 80003d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003d4:	4a52      	ldr	r2, [pc, #328]	; (8000520 <GPIO_PeriClockControl+0x1ac>)
 80003d6:	f043 0308 	orr.w	r3, r3, #8
 80003da:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003dc:	e098      	b.n	8000510 <GPIO_PeriClockControl+0x19c>
		}else if(pGPIOx==GPIOE)
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	4a53      	ldr	r2, [pc, #332]	; (8000530 <GPIO_PeriClockControl+0x1bc>)
 80003e2:	4293      	cmp	r3, r2
 80003e4:	d106      	bne.n	80003f4 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 80003e6:	4b4e      	ldr	r3, [pc, #312]	; (8000520 <GPIO_PeriClockControl+0x1ac>)
 80003e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003ea:	4a4d      	ldr	r2, [pc, #308]	; (8000520 <GPIO_PeriClockControl+0x1ac>)
 80003ec:	f043 0310 	orr.w	r3, r3, #16
 80003f0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003f2:	e08d      	b.n	8000510 <GPIO_PeriClockControl+0x19c>
		}else if(pGPIOx==GPIOF)
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	4a4f      	ldr	r2, [pc, #316]	; (8000534 <GPIO_PeriClockControl+0x1c0>)
 80003f8:	4293      	cmp	r3, r2
 80003fa:	d106      	bne.n	800040a <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 80003fc:	4b48      	ldr	r3, [pc, #288]	; (8000520 <GPIO_PeriClockControl+0x1ac>)
 80003fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000400:	4a47      	ldr	r2, [pc, #284]	; (8000520 <GPIO_PeriClockControl+0x1ac>)
 8000402:	f043 0320 	orr.w	r3, r3, #32
 8000406:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000408:	e082      	b.n	8000510 <GPIO_PeriClockControl+0x19c>
		}else if(pGPIOx==GPIOG)
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	4a4a      	ldr	r2, [pc, #296]	; (8000538 <GPIO_PeriClockControl+0x1c4>)
 800040e:	4293      	cmp	r3, r2
 8000410:	d106      	bne.n	8000420 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 8000412:	4b43      	ldr	r3, [pc, #268]	; (8000520 <GPIO_PeriClockControl+0x1ac>)
 8000414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000416:	4a42      	ldr	r2, [pc, #264]	; (8000520 <GPIO_PeriClockControl+0x1ac>)
 8000418:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800041c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800041e:	e077      	b.n	8000510 <GPIO_PeriClockControl+0x19c>
		}else if(pGPIOx==GPIOH)
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	4a46      	ldr	r2, [pc, #280]	; (800053c <GPIO_PeriClockControl+0x1c8>)
 8000424:	4293      	cmp	r3, r2
 8000426:	d106      	bne.n	8000436 <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 8000428:	4b3d      	ldr	r3, [pc, #244]	; (8000520 <GPIO_PeriClockControl+0x1ac>)
 800042a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800042c:	4a3c      	ldr	r2, [pc, #240]	; (8000520 <GPIO_PeriClockControl+0x1ac>)
 800042e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000432:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000434:	e06c      	b.n	8000510 <GPIO_PeriClockControl+0x19c>
		}else if(pGPIOx==GPIOI)
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	4a41      	ldr	r2, [pc, #260]	; (8000540 <GPIO_PeriClockControl+0x1cc>)
 800043a:	4293      	cmp	r3, r2
 800043c:	d168      	bne.n	8000510 <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_EN();
 800043e:	4b38      	ldr	r3, [pc, #224]	; (8000520 <GPIO_PeriClockControl+0x1ac>)
 8000440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000442:	4a37      	ldr	r2, [pc, #220]	; (8000520 <GPIO_PeriClockControl+0x1ac>)
 8000444:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000448:	6313      	str	r3, [r2, #48]	; 0x30
}
 800044a:	e061      	b.n	8000510 <GPIO_PeriClockControl+0x19c>
		if(pGPIOx==GPIOA)
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	4a33      	ldr	r2, [pc, #204]	; (800051c <GPIO_PeriClockControl+0x1a8>)
 8000450:	4293      	cmp	r3, r2
 8000452:	d106      	bne.n	8000462 <GPIO_PeriClockControl+0xee>
			GPIOA_PCLK_DN();
 8000454:	4b32      	ldr	r3, [pc, #200]	; (8000520 <GPIO_PeriClockControl+0x1ac>)
 8000456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000458:	4a31      	ldr	r2, [pc, #196]	; (8000520 <GPIO_PeriClockControl+0x1ac>)
 800045a:	f023 0301 	bic.w	r3, r3, #1
 800045e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000460:	e056      	b.n	8000510 <GPIO_PeriClockControl+0x19c>
		}else if(pGPIOx==GPIOB)
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	4a2f      	ldr	r2, [pc, #188]	; (8000524 <GPIO_PeriClockControl+0x1b0>)
 8000466:	4293      	cmp	r3, r2
 8000468:	d106      	bne.n	8000478 <GPIO_PeriClockControl+0x104>
			GPIOB_PCLK_DN();
 800046a:	4b2d      	ldr	r3, [pc, #180]	; (8000520 <GPIO_PeriClockControl+0x1ac>)
 800046c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800046e:	4a2c      	ldr	r2, [pc, #176]	; (8000520 <GPIO_PeriClockControl+0x1ac>)
 8000470:	f023 0302 	bic.w	r3, r3, #2
 8000474:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000476:	e04b      	b.n	8000510 <GPIO_PeriClockControl+0x19c>
		}else if(pGPIOx==GPIOC)
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	4a2b      	ldr	r2, [pc, #172]	; (8000528 <GPIO_PeriClockControl+0x1b4>)
 800047c:	4293      	cmp	r3, r2
 800047e:	d106      	bne.n	800048e <GPIO_PeriClockControl+0x11a>
			GPIOC_PCLK_DN();
 8000480:	4b27      	ldr	r3, [pc, #156]	; (8000520 <GPIO_PeriClockControl+0x1ac>)
 8000482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000484:	4a26      	ldr	r2, [pc, #152]	; (8000520 <GPIO_PeriClockControl+0x1ac>)
 8000486:	f023 0304 	bic.w	r3, r3, #4
 800048a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800048c:	e040      	b.n	8000510 <GPIO_PeriClockControl+0x19c>
		}else if(pGPIOx==GPIOD)
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	4a26      	ldr	r2, [pc, #152]	; (800052c <GPIO_PeriClockControl+0x1b8>)
 8000492:	4293      	cmp	r3, r2
 8000494:	d106      	bne.n	80004a4 <GPIO_PeriClockControl+0x130>
			GPIOD_PCLK_DN();
 8000496:	4b22      	ldr	r3, [pc, #136]	; (8000520 <GPIO_PeriClockControl+0x1ac>)
 8000498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800049a:	4a21      	ldr	r2, [pc, #132]	; (8000520 <GPIO_PeriClockControl+0x1ac>)
 800049c:	f023 0308 	bic.w	r3, r3, #8
 80004a0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004a2:	e035      	b.n	8000510 <GPIO_PeriClockControl+0x19c>
		}else if(pGPIOx==GPIOE)
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	4a22      	ldr	r2, [pc, #136]	; (8000530 <GPIO_PeriClockControl+0x1bc>)
 80004a8:	4293      	cmp	r3, r2
 80004aa:	d106      	bne.n	80004ba <GPIO_PeriClockControl+0x146>
			GPIOE_PCLK_DN();
 80004ac:	4b1c      	ldr	r3, [pc, #112]	; (8000520 <GPIO_PeriClockControl+0x1ac>)
 80004ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004b0:	4a1b      	ldr	r2, [pc, #108]	; (8000520 <GPIO_PeriClockControl+0x1ac>)
 80004b2:	f023 0310 	bic.w	r3, r3, #16
 80004b6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004b8:	e02a      	b.n	8000510 <GPIO_PeriClockControl+0x19c>
		}else if(pGPIOx==GPIOF)
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	4a1d      	ldr	r2, [pc, #116]	; (8000534 <GPIO_PeriClockControl+0x1c0>)
 80004be:	4293      	cmp	r3, r2
 80004c0:	d106      	bne.n	80004d0 <GPIO_PeriClockControl+0x15c>
			GPIOF_PCLK_DN();
 80004c2:	4b17      	ldr	r3, [pc, #92]	; (8000520 <GPIO_PeriClockControl+0x1ac>)
 80004c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004c6:	4a16      	ldr	r2, [pc, #88]	; (8000520 <GPIO_PeriClockControl+0x1ac>)
 80004c8:	f023 0320 	bic.w	r3, r3, #32
 80004cc:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004ce:	e01f      	b.n	8000510 <GPIO_PeriClockControl+0x19c>
		}else if(pGPIOx==GPIOG)
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	4a19      	ldr	r2, [pc, #100]	; (8000538 <GPIO_PeriClockControl+0x1c4>)
 80004d4:	4293      	cmp	r3, r2
 80004d6:	d106      	bne.n	80004e6 <GPIO_PeriClockControl+0x172>
			GPIOG_PCLK_DN();
 80004d8:	4b11      	ldr	r3, [pc, #68]	; (8000520 <GPIO_PeriClockControl+0x1ac>)
 80004da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004dc:	4a10      	ldr	r2, [pc, #64]	; (8000520 <GPIO_PeriClockControl+0x1ac>)
 80004de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80004e2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004e4:	e014      	b.n	8000510 <GPIO_PeriClockControl+0x19c>
		}else if(pGPIOx==GPIOH)
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	4a14      	ldr	r2, [pc, #80]	; (800053c <GPIO_PeriClockControl+0x1c8>)
 80004ea:	4293      	cmp	r3, r2
 80004ec:	d106      	bne.n	80004fc <GPIO_PeriClockControl+0x188>
			GPIOH_PCLK_DN();
 80004ee:	4b0c      	ldr	r3, [pc, #48]	; (8000520 <GPIO_PeriClockControl+0x1ac>)
 80004f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004f2:	4a0b      	ldr	r2, [pc, #44]	; (8000520 <GPIO_PeriClockControl+0x1ac>)
 80004f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80004f8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004fa:	e009      	b.n	8000510 <GPIO_PeriClockControl+0x19c>
		}else if(pGPIOx==GPIOI)
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	4a10      	ldr	r2, [pc, #64]	; (8000540 <GPIO_PeriClockControl+0x1cc>)
 8000500:	4293      	cmp	r3, r2
 8000502:	d105      	bne.n	8000510 <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_DN();
 8000504:	4b06      	ldr	r3, [pc, #24]	; (8000520 <GPIO_PeriClockControl+0x1ac>)
 8000506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000508:	4a05      	ldr	r2, [pc, #20]	; (8000520 <GPIO_PeriClockControl+0x1ac>)
 800050a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800050e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000510:	bf00      	nop
 8000512:	370c      	adds	r7, #12
 8000514:	46bd      	mov	sp, r7
 8000516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051a:	4770      	bx	lr
 800051c:	40020000 	.word	0x40020000
 8000520:	40023800 	.word	0x40023800
 8000524:	40020400 	.word	0x40020400
 8000528:	40020800 	.word	0x40020800
 800052c:	40020c00 	.word	0x40020c00
 8000530:	40021000 	.word	0x40021000
 8000534:	40021400 	.word	0x40021400
 8000538:	40021800 	.word	0x40021800
 800053c:	40021c00 	.word	0x40021c00
 8000540:	40022000 	.word	0x40022000

08000544 <GPIO_Init>:

/*Init and De-Init */

void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b086      	sub	sp, #24
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
	uint32_t temp=0;
 800054c:	2300      	movs	r3, #0
 800054e:	617b      	str	r3, [r7, #20]

	// enable the peripheral clock
	GPIO_PeriClockControl(pGPIOHandle-> pGPIOx, ENABLE);
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	2101      	movs	r1, #1
 8000556:	4618      	mov	r0, r3
 8000558:	f7ff ff0c 	bl	8000374 <GPIO_PeriClockControl>
	//1. configure the mode of gpio pin

	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode<=GPIO_MODE_ANALOG )
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	795b      	ldrb	r3, [r3, #5]
 8000560:	2b03      	cmp	r3, #3
 8000562:	d81f      	bhi.n	80005a4 <GPIO_Init+0x60>
	{
		temp=(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <<(2 * pGPIOHandle ->GPIO_PinConfig.GPIO_PinNumber));
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	795b      	ldrb	r3, [r3, #5]
 8000568:	461a      	mov	r2, r3
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	791b      	ldrb	r3, [r3, #4]
 800056e:	005b      	lsls	r3, r3, #1
 8000570:	fa02 f303 	lsl.w	r3, r2, r3
 8000574:	617b      	str	r3, [r7, #20]
		//we are writing the pin mode to the specific pin number (0..15)
		pGPIOHandle-> pGPIOx->MODER &= ~(0x3 << pGPIOHandle ->GPIO_PinConfig.GPIO_PinNumber); //clearing
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	681a      	ldr	r2, [r3, #0]
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	791b      	ldrb	r3, [r3, #4]
 8000580:	4619      	mov	r1, r3
 8000582:	2303      	movs	r3, #3
 8000584:	408b      	lsls	r3, r1
 8000586:	43db      	mvns	r3, r3
 8000588:	4619      	mov	r1, r3
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	400a      	ands	r2, r1
 8000590:	601a      	str	r2, [r3, #0]
		pGPIOHandle-> pGPIOx->MODER |=temp; //setting
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	6819      	ldr	r1, [r3, #0]
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	697a      	ldr	r2, [r7, #20]
 800059e:	430a      	orrs	r2, r1
 80005a0:	601a      	str	r2, [r3, #0]
 80005a2:	e0d1      	b.n	8000748 <GPIO_Init+0x204>

	}else
	{
		//interrupt mode
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode==GPIO_MODE_IT_FT)
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	795b      	ldrb	r3, [r3, #5]
 80005a8:	2b04      	cmp	r3, #4
 80005aa:	d117      	bne.n	80005dc <GPIO_Init+0x98>
		{
			//1. configure the FTSR
			EXTI->FTSR |= (1<< pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);
 80005ac:	4b4a      	ldr	r3, [pc, #296]	; (80006d8 <GPIO_Init+0x194>)
 80005ae:	68db      	ldr	r3, [r3, #12]
 80005b0:	687a      	ldr	r2, [r7, #4]
 80005b2:	7912      	ldrb	r2, [r2, #4]
 80005b4:	4611      	mov	r1, r2
 80005b6:	2201      	movs	r2, #1
 80005b8:	408a      	lsls	r2, r1
 80005ba:	4611      	mov	r1, r2
 80005bc:	4a46      	ldr	r2, [pc, #280]	; (80006d8 <GPIO_Init+0x194>)
 80005be:	430b      	orrs	r3, r1
 80005c0:	60d3      	str	r3, [r2, #12]
			//clear the correspunding RTSR bit
			EXTI->RTSR &=~(1<< pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);
 80005c2:	4b45      	ldr	r3, [pc, #276]	; (80006d8 <GPIO_Init+0x194>)
 80005c4:	689b      	ldr	r3, [r3, #8]
 80005c6:	687a      	ldr	r2, [r7, #4]
 80005c8:	7912      	ldrb	r2, [r2, #4]
 80005ca:	4611      	mov	r1, r2
 80005cc:	2201      	movs	r2, #1
 80005ce:	408a      	lsls	r2, r1
 80005d0:	43d2      	mvns	r2, r2
 80005d2:	4611      	mov	r1, r2
 80005d4:	4a40      	ldr	r2, [pc, #256]	; (80006d8 <GPIO_Init+0x194>)
 80005d6:	400b      	ands	r3, r1
 80005d8:	6093      	str	r3, [r2, #8]
 80005da:	e035      	b.n	8000648 <GPIO_Init+0x104>

		}else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode==GPIO_MODE_IT_RT)
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	795b      	ldrb	r3, [r3, #5]
 80005e0:	2b05      	cmp	r3, #5
 80005e2:	d117      	bne.n	8000614 <GPIO_Init+0xd0>
		{
			//1. Configure the RTSR
			EXTI->RTSR |= (1<< pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);
 80005e4:	4b3c      	ldr	r3, [pc, #240]	; (80006d8 <GPIO_Init+0x194>)
 80005e6:	689b      	ldr	r3, [r3, #8]
 80005e8:	687a      	ldr	r2, [r7, #4]
 80005ea:	7912      	ldrb	r2, [r2, #4]
 80005ec:	4611      	mov	r1, r2
 80005ee:	2201      	movs	r2, #1
 80005f0:	408a      	lsls	r2, r1
 80005f2:	4611      	mov	r1, r2
 80005f4:	4a38      	ldr	r2, [pc, #224]	; (80006d8 <GPIO_Init+0x194>)
 80005f6:	430b      	orrs	r3, r1
 80005f8:	6093      	str	r3, [r2, #8]
			//clear the correspunding RTSR bit
			EXTI->FTSR &=~(1<< pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);
 80005fa:	4b37      	ldr	r3, [pc, #220]	; (80006d8 <GPIO_Init+0x194>)
 80005fc:	68db      	ldr	r3, [r3, #12]
 80005fe:	687a      	ldr	r2, [r7, #4]
 8000600:	7912      	ldrb	r2, [r2, #4]
 8000602:	4611      	mov	r1, r2
 8000604:	2201      	movs	r2, #1
 8000606:	408a      	lsls	r2, r1
 8000608:	43d2      	mvns	r2, r2
 800060a:	4611      	mov	r1, r2
 800060c:	4a32      	ldr	r2, [pc, #200]	; (80006d8 <GPIO_Init+0x194>)
 800060e:	400b      	ands	r3, r1
 8000610:	60d3      	str	r3, [r2, #12]
 8000612:	e019      	b.n	8000648 <GPIO_Init+0x104>

		}else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode==GPIO_MODE_IT_RFT)
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	795b      	ldrb	r3, [r3, #5]
 8000618:	2b06      	cmp	r3, #6
 800061a:	d115      	bne.n	8000648 <GPIO_Init+0x104>
		{
			//1. Configure the FTSR AND RTSR
			EXTI->RTSR |= (1<< pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);
 800061c:	4b2e      	ldr	r3, [pc, #184]	; (80006d8 <GPIO_Init+0x194>)
 800061e:	689b      	ldr	r3, [r3, #8]
 8000620:	687a      	ldr	r2, [r7, #4]
 8000622:	7912      	ldrb	r2, [r2, #4]
 8000624:	4611      	mov	r1, r2
 8000626:	2201      	movs	r2, #1
 8000628:	408a      	lsls	r2, r1
 800062a:	4611      	mov	r1, r2
 800062c:	4a2a      	ldr	r2, [pc, #168]	; (80006d8 <GPIO_Init+0x194>)
 800062e:	430b      	orrs	r3, r1
 8000630:	6093      	str	r3, [r2, #8]
			EXTI->FTSR |= (1<< pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);
 8000632:	4b29      	ldr	r3, [pc, #164]	; (80006d8 <GPIO_Init+0x194>)
 8000634:	68db      	ldr	r3, [r3, #12]
 8000636:	687a      	ldr	r2, [r7, #4]
 8000638:	7912      	ldrb	r2, [r2, #4]
 800063a:	4611      	mov	r1, r2
 800063c:	2201      	movs	r2, #1
 800063e:	408a      	lsls	r2, r1
 8000640:	4611      	mov	r1, r2
 8000642:	4a25      	ldr	r2, [pc, #148]	; (80006d8 <GPIO_Init+0x194>)
 8000644:	430b      	orrs	r3, r1
 8000646:	60d3      	str	r3, [r2, #12]
		}
		//2. configure the GPIO port selection in SYSCFG_EXTICR

		uint8_t temp1= (pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber) / 4;
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	791b      	ldrb	r3, [r3, #4]
 800064c:	089b      	lsrs	r3, r3, #2
 800064e:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2= (pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber) % 4;
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	791b      	ldrb	r3, [r3, #4]
 8000654:	f003 0303 	and.w	r3, r3, #3
 8000658:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle -> pGPIOx);
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	4a1f      	ldr	r2, [pc, #124]	; (80006dc <GPIO_Init+0x198>)
 8000660:	4293      	cmp	r3, r2
 8000662:	d04d      	beq.n	8000700 <GPIO_Init+0x1bc>
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	4a1d      	ldr	r2, [pc, #116]	; (80006e0 <GPIO_Init+0x19c>)
 800066a:	4293      	cmp	r3, r2
 800066c:	d032      	beq.n	80006d4 <GPIO_Init+0x190>
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	4a1c      	ldr	r2, [pc, #112]	; (80006e4 <GPIO_Init+0x1a0>)
 8000674:	4293      	cmp	r3, r2
 8000676:	d02b      	beq.n	80006d0 <GPIO_Init+0x18c>
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	4a1a      	ldr	r2, [pc, #104]	; (80006e8 <GPIO_Init+0x1a4>)
 800067e:	4293      	cmp	r3, r2
 8000680:	d024      	beq.n	80006cc <GPIO_Init+0x188>
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	4a19      	ldr	r2, [pc, #100]	; (80006ec <GPIO_Init+0x1a8>)
 8000688:	4293      	cmp	r3, r2
 800068a:	d01d      	beq.n	80006c8 <GPIO_Init+0x184>
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	4a17      	ldr	r2, [pc, #92]	; (80006f0 <GPIO_Init+0x1ac>)
 8000692:	4293      	cmp	r3, r2
 8000694:	d016      	beq.n	80006c4 <GPIO_Init+0x180>
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	4a16      	ldr	r2, [pc, #88]	; (80006f4 <GPIO_Init+0x1b0>)
 800069c:	4293      	cmp	r3, r2
 800069e:	d00f      	beq.n	80006c0 <GPIO_Init+0x17c>
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	4a14      	ldr	r2, [pc, #80]	; (80006f8 <GPIO_Init+0x1b4>)
 80006a6:	4293      	cmp	r3, r2
 80006a8:	d008      	beq.n	80006bc <GPIO_Init+0x178>
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	4a13      	ldr	r2, [pc, #76]	; (80006fc <GPIO_Init+0x1b8>)
 80006b0:	4293      	cmp	r3, r2
 80006b2:	d101      	bne.n	80006b8 <GPIO_Init+0x174>
 80006b4:	2308      	movs	r3, #8
 80006b6:	e024      	b.n	8000702 <GPIO_Init+0x1be>
 80006b8:	2300      	movs	r3, #0
 80006ba:	e022      	b.n	8000702 <GPIO_Init+0x1be>
 80006bc:	2307      	movs	r3, #7
 80006be:	e020      	b.n	8000702 <GPIO_Init+0x1be>
 80006c0:	2306      	movs	r3, #6
 80006c2:	e01e      	b.n	8000702 <GPIO_Init+0x1be>
 80006c4:	2305      	movs	r3, #5
 80006c6:	e01c      	b.n	8000702 <GPIO_Init+0x1be>
 80006c8:	2304      	movs	r3, #4
 80006ca:	e01a      	b.n	8000702 <GPIO_Init+0x1be>
 80006cc:	2303      	movs	r3, #3
 80006ce:	e018      	b.n	8000702 <GPIO_Init+0x1be>
 80006d0:	2302      	movs	r3, #2
 80006d2:	e016      	b.n	8000702 <GPIO_Init+0x1be>
 80006d4:	2301      	movs	r3, #1
 80006d6:	e014      	b.n	8000702 <GPIO_Init+0x1be>
 80006d8:	40013c00 	.word	0x40013c00
 80006dc:	40020000 	.word	0x40020000
 80006e0:	40020400 	.word	0x40020400
 80006e4:	40020800 	.word	0x40020800
 80006e8:	40020c00 	.word	0x40020c00
 80006ec:	40021000 	.word	0x40021000
 80006f0:	40021400 	.word	0x40021400
 80006f4:	40021800 	.word	0x40021800
 80006f8:	40021c00 	.word	0x40021c00
 80006fc:	40022000 	.word	0x40022000
 8000700:	2300      	movs	r3, #0
 8000702:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 8000704:	4b5c      	ldr	r3, [pc, #368]	; (8000878 <GPIO_Init+0x334>)
 8000706:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000708:	4a5b      	ldr	r2, [pc, #364]	; (8000878 <GPIO_Init+0x334>)
 800070a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800070e:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[temp1] |= portcode << (temp2 * 4);
 8000710:	4a5a      	ldr	r2, [pc, #360]	; (800087c <GPIO_Init+0x338>)
 8000712:	7cfb      	ldrb	r3, [r7, #19]
 8000714:	3302      	adds	r3, #2
 8000716:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800071a:	7c79      	ldrb	r1, [r7, #17]
 800071c:	7cbb      	ldrb	r3, [r7, #18]
 800071e:	009b      	lsls	r3, r3, #2
 8000720:	fa01 f303 	lsl.w	r3, r1, r3
 8000724:	4618      	mov	r0, r3
 8000726:	4955      	ldr	r1, [pc, #340]	; (800087c <GPIO_Init+0x338>)
 8000728:	7cfb      	ldrb	r3, [r7, #19]
 800072a:	4302      	orrs	r2, r0
 800072c:	3302      	adds	r3, #2
 800072e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		//3. enable the EXTI interrupt delivery using IMR(interrupt master register)

		EXTI->IMR |= (1<< pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);
 8000732:	4b53      	ldr	r3, [pc, #332]	; (8000880 <GPIO_Init+0x33c>)
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	687a      	ldr	r2, [r7, #4]
 8000738:	7912      	ldrb	r2, [r2, #4]
 800073a:	4611      	mov	r1, r2
 800073c:	2201      	movs	r2, #1
 800073e:	408a      	lsls	r2, r1
 8000740:	4611      	mov	r1, r2
 8000742:	4a4f      	ldr	r2, [pc, #316]	; (8000880 <GPIO_Init+0x33c>)
 8000744:	430b      	orrs	r3, r1
 8000746:	6013      	str	r3, [r2, #0]
	}


	//2. configure the speed

	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed<< (2* pGPIOHandle-> GPIO_PinConfig.GPIO_PinNumber));
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	799b      	ldrb	r3, [r3, #6]
 800074c:	461a      	mov	r2, r3
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	791b      	ldrb	r3, [r3, #4]
 8000752:	005b      	lsls	r3, r3, #1
 8000754:	fa02 f303 	lsl.w	r3, r2, r3
 8000758:	617b      	str	r3, [r7, #20]
	pGPIOHandle-> pGPIOx->OSPEEDR &= ~(0x3 << pGPIOHandle ->GPIO_PinConfig.GPIO_PinNumber); //clearing
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	689a      	ldr	r2, [r3, #8]
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	791b      	ldrb	r3, [r3, #4]
 8000764:	4619      	mov	r1, r3
 8000766:	2303      	movs	r3, #3
 8000768:	408b      	lsls	r3, r1
 800076a:	43db      	mvns	r3, r3
 800076c:	4619      	mov	r1, r3
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	400a      	ands	r2, r1
 8000774:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	6899      	ldr	r1, [r3, #8]
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	697a      	ldr	r2, [r7, #20]
 8000782:	430a      	orrs	r2, r1
 8000784:	609a      	str	r2, [r3, #8]


	//3. configure the pupd settings

	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl<< (2* pGPIOHandle-> GPIO_PinConfig.GPIO_PinNumber));
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	79db      	ldrb	r3, [r3, #7]
 800078a:	461a      	mov	r2, r3
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	791b      	ldrb	r3, [r3, #4]
 8000790:	005b      	lsls	r3, r3, #1
 8000792:	fa02 f303 	lsl.w	r3, r2, r3
 8000796:	617b      	str	r3, [r7, #20]
	pGPIOHandle-> pGPIOx->PUPDR &= ~(0x3 << pGPIOHandle ->GPIO_PinConfig.GPIO_PinNumber); //clearing
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	68da      	ldr	r2, [r3, #12]
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	791b      	ldrb	r3, [r3, #4]
 80007a2:	4619      	mov	r1, r3
 80007a4:	2303      	movs	r3, #3
 80007a6:	408b      	lsls	r3, r1
 80007a8:	43db      	mvns	r3, r3
 80007aa:	4619      	mov	r1, r3
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	400a      	ands	r2, r1
 80007b2:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	68d9      	ldr	r1, [r3, #12]
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	697a      	ldr	r2, [r7, #20]
 80007c0:	430a      	orrs	r2, r1
 80007c2:	60da      	str	r2, [r3, #12]


	//4. configure the optype

	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType<< pGPIOHandle-> GPIO_PinConfig.GPIO_PinNumber);
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	7a1b      	ldrb	r3, [r3, #8]
 80007c8:	461a      	mov	r2, r3
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	791b      	ldrb	r3, [r3, #4]
 80007ce:	fa02 f303 	lsl.w	r3, r2, r3
 80007d2:	617b      	str	r3, [r7, #20]
	pGPIOHandle-> pGPIOx->OTYPER &= ~(0x1 << pGPIOHandle ->GPIO_PinConfig.GPIO_PinNumber); //clearing
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	685a      	ldr	r2, [r3, #4]
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	791b      	ldrb	r3, [r3, #4]
 80007de:	4619      	mov	r1, r3
 80007e0:	2301      	movs	r3, #1
 80007e2:	408b      	lsls	r3, r1
 80007e4:	43db      	mvns	r3, r3
 80007e6:	4619      	mov	r1, r3
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	400a      	ands	r2, r1
 80007ee:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	6859      	ldr	r1, [r3, #4]
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	697a      	ldr	r2, [r7, #20]
 80007fc:	430a      	orrs	r2, r1
 80007fe:	605a      	str	r2, [r3, #4]


	//5. configure the alt functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	795b      	ldrb	r3, [r3, #5]
 8000804:	2b02      	cmp	r3, #2
 8000806:	d132      	bne.n	800086e <GPIO_Init+0x32a>
	{
		//configure the alt function
		uint32_t temp1,temp2;
		temp1= pGPIOHandle-> GPIO_PinConfig.GPIO_PinNumber/8;
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	791b      	ldrb	r3, [r3, #4]
 800080c:	08db      	lsrs	r3, r3, #3
 800080e:	b2db      	uxtb	r3, r3
 8000810:	60fb      	str	r3, [r7, #12]
		temp2= pGPIOHandle-> GPIO_PinConfig.GPIO_PinNumber%8;
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	791b      	ldrb	r3, [r3, #4]
 8000816:	f003 0307 	and.w	r3, r3, #7
 800081a:	60bb      	str	r3, [r7, #8]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0XF << (4* temp2));
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	68fa      	ldr	r2, [r7, #12]
 8000822:	3208      	adds	r2, #8
 8000824:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000828:	68bb      	ldr	r3, [r7, #8]
 800082a:	009b      	lsls	r3, r3, #2
 800082c:	210f      	movs	r1, #15
 800082e:	fa01 f303 	lsl.w	r3, r1, r3
 8000832:	43db      	mvns	r3, r3
 8000834:	4619      	mov	r1, r3
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	4011      	ands	r1, r2
 800083c:	68fa      	ldr	r2, [r7, #12]
 800083e:	3208      	adds	r2, #8
 8000840:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle-> GPIO_PinConfig.GPIO_PinAltFunMode<< (4* temp2));
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	68fa      	ldr	r2, [r7, #12]
 800084a:	3208      	adds	r2, #8
 800084c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	7a5b      	ldrb	r3, [r3, #9]
 8000854:	4619      	mov	r1, r3
 8000856:	68bb      	ldr	r3, [r7, #8]
 8000858:	009b      	lsls	r3, r3, #2
 800085a:	fa01 f303 	lsl.w	r3, r1, r3
 800085e:	4619      	mov	r1, r3
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	4311      	orrs	r1, r2
 8000866:	68fa      	ldr	r2, [r7, #12]
 8000868:	3208      	adds	r2, #8
 800086a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}

}
 800086e:	bf00      	nop
 8000870:	3718      	adds	r7, #24
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	40023800 	.word	0x40023800
 800087c:	40013800 	.word	0x40013800
 8000880:	40013c00 	.word	0x40013c00

08000884 <GPIO_ReadFromInputPin>:
}

/*Data Read and Write */

uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 8000884:	b480      	push	{r7}
 8000886:	b085      	sub	sp, #20
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
 800088c:	460b      	mov	r3, r1
 800088e:	70fb      	strb	r3, [r7, #3]
	uint8_t value;
	value=(uint8_t) (( pGPIOx-> IDR >> PinNumber) & 0x00000001); // whichever the pin that we need to read it ll shift to the 0. register bit
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	691a      	ldr	r2, [r3, #16]
 8000894:	78fb      	ldrb	r3, [r7, #3]
 8000896:	fa22 f303 	lsr.w	r3, r2, r3
 800089a:	b2db      	uxtb	r3, r3
 800089c:	f003 0301 	and.w	r3, r3, #1
 80008a0:	73fb      	strb	r3, [r7, #15]
	return value;									//and we can read it from there
 80008a2:	7bfb      	ldrb	r3, [r7, #15]

}
 80008a4:	4618      	mov	r0, r3
 80008a6:	3714      	adds	r7, #20
 80008a8:	46bd      	mov	sp, r7
 80008aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ae:	4770      	bx	lr

080008b0 <I2C_GenerateStartCondition>:
static void I2C_ExecuteAddressPhase(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr);
static void I2C_ClearADDRFlag(I2C_RegDef_t *pI2Cx);
static void I2C_GenerateStopCondition(I2C_RegDef_t *pI2Cx);

static void I2C_GenerateStartCondition(I2C_RegDef_t *pI2Cx)
{
 80008b0:	b480      	push	{r7}
 80008b2:	b083      	sub	sp, #12
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
	 pI2Cx-> CR1 |= (1 << I2C_CR1_START);
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	601a      	str	r2, [r3, #0]
}
 80008c4:	bf00      	nop
 80008c6:	370c      	adds	r7, #12
 80008c8:	46bd      	mov	sp, r7
 80008ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ce:	4770      	bx	lr

080008d0 <I2C_ExecuteAddressPhase>:
static void I2C_ExecuteAddressPhase(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr)
{
 80008d0:	b480      	push	{r7}
 80008d2:	b083      	sub	sp, #12
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
 80008d8:	460b      	mov	r3, r1
 80008da:	70fb      	strb	r3, [r7, #3]
	SlaveAddr = SlaveAddr << 1; //from 1. bit to 7. bit in case of 7 bit slave address
 80008dc:	78fb      	ldrb	r3, [r7, #3]
 80008de:	005b      	lsls	r3, r3, #1
 80008e0:	70fb      	strb	r3, [r7, #3]
	SlaveAddr &= ~(1); // slaveaddr is  slave address + r/nw bit=0
 80008e2:	78fb      	ldrb	r3, [r7, #3]
 80008e4:	f023 0301 	bic.w	r3, r3, #1
 80008e8:	70fb      	strb	r3, [r7, #3]
	pI2Cx -> DR =SlaveAddr;
 80008ea:	78fa      	ldrb	r2, [r7, #3]
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	611a      	str	r2, [r3, #16]

}
 80008f0:	bf00      	nop
 80008f2:	370c      	adds	r7, #12
 80008f4:	46bd      	mov	sp, r7
 80008f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fa:	4770      	bx	lr

080008fc <I2C_ClearADDRFlag>:
static void I2C_ClearADDRFlag(I2C_RegDef_t *pI2Cx)
{
 80008fc:	b480      	push	{r7}
 80008fe:	b085      	sub	sp, #20
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
	uint32_t dummyread = pI2Cx->SR1;
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	695b      	ldr	r3, [r3, #20]
 8000908:	60fb      	str	r3, [r7, #12]
	dummyread = pI2Cx->SR2;
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	699b      	ldr	r3, [r3, #24]
 800090e:	60fb      	str	r3, [r7, #12]
	(void) dummyread; // for error: (unused variable) we must write this line
}
 8000910:	bf00      	nop
 8000912:	3714      	adds	r7, #20
 8000914:	46bd      	mov	sp, r7
 8000916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091a:	4770      	bx	lr

0800091c <I2C_GenerateStopCondition>:


static void I2C_GenerateStopCondition(I2C_RegDef_t *pI2Cx)
{
 800091c:	b480      	push	{r7}
 800091e:	b083      	sub	sp, #12
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
	pI2Cx-> CR1 |= (1 << I2C_CR1_STOP);
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	601a      	str	r2, [r3, #0]
}
 8000930:	bf00      	nop
 8000932:	370c      	adds	r7, #12
 8000934:	46bd      	mov	sp, r7
 8000936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093a:	4770      	bx	lr

0800093c <I2C_PeripheralControl>:

void I2C_PeripheralControl(I2C_RegDef_t *pI2Cx, uint8_t EnOrDi)
{
 800093c:	b480      	push	{r7}
 800093e:	b083      	sub	sp, #12
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
 8000944:	460b      	mov	r3, r1
 8000946:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 8000948:	78fb      	ldrb	r3, [r7, #3]
 800094a:	2b01      	cmp	r3, #1
 800094c:	d106      	bne.n	800095c <I2C_PeripheralControl+0x20>
	{
		pI2Cx->CR1 |= (1 << I2C_CR1_PE);
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	f043 0201 	orr.w	r2, r3, #1
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	601a      	str	r2, [r3, #0]
	}else
	{
		pI2Cx->CR1 &= ~(1 << 0);
	}

}
 800095a:	e005      	b.n	8000968 <I2C_PeripheralControl+0x2c>
		pI2Cx->CR1 &= ~(1 << 0);
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	f023 0201 	bic.w	r2, r3, #1
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	601a      	str	r2, [r3, #0]
}
 8000968:	bf00      	nop
 800096a:	370c      	adds	r7, #12
 800096c:	46bd      	mov	sp, r7
 800096e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000972:	4770      	bx	lr

08000974 <I2C_PeriClockControl>:
 * @return            -
 *
 * @Note              -
 */
void I2C_PeriClockControl(I2C_RegDef_t *pI2Cx, uint8_t EnorDi)
{
 8000974:	b480      	push	{r7}
 8000976:	b083      	sub	sp, #12
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
 800097c:	460b      	mov	r3, r1
 800097e:	70fb      	strb	r3, [r7, #3]
	if(EnorDi==ENABLE)
 8000980:	78fb      	ldrb	r3, [r7, #3]
 8000982:	2b01      	cmp	r3, #1
 8000984:	d120      	bne.n	80009c8 <I2C_PeriClockControl+0x54>
			{
				if(pI2Cx==I2C1)
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	4a22      	ldr	r2, [pc, #136]	; (8000a14 <I2C_PeriClockControl+0xa0>)
 800098a:	4293      	cmp	r3, r2
 800098c:	d106      	bne.n	800099c <I2C_PeriClockControl+0x28>
				{
					I2C1_PCLK_EN();
 800098e:	4b22      	ldr	r3, [pc, #136]	; (8000a18 <I2C_PeriClockControl+0xa4>)
 8000990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000992:	4a21      	ldr	r2, [pc, #132]	; (8000a18 <I2C_PeriClockControl+0xa4>)
 8000994:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000998:	6413      	str	r3, [r2, #64]	; 0x40
			{
				I2C3_PCLK_DN();
			}

		}
}
 800099a:	e035      	b.n	8000a08 <I2C_PeriClockControl+0x94>
				}else if(pI2Cx==I2C2)
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	4a1f      	ldr	r2, [pc, #124]	; (8000a1c <I2C_PeriClockControl+0xa8>)
 80009a0:	4293      	cmp	r3, r2
 80009a2:	d106      	bne.n	80009b2 <I2C_PeriClockControl+0x3e>
					I2C2_PCLK_EN();
 80009a4:	4b1c      	ldr	r3, [pc, #112]	; (8000a18 <I2C_PeriClockControl+0xa4>)
 80009a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009a8:	4a1b      	ldr	r2, [pc, #108]	; (8000a18 <I2C_PeriClockControl+0xa4>)
 80009aa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80009ae:	6413      	str	r3, [r2, #64]	; 0x40
}
 80009b0:	e02a      	b.n	8000a08 <I2C_PeriClockControl+0x94>
				}else if(pI2Cx==I2C3)
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	4a1a      	ldr	r2, [pc, #104]	; (8000a20 <I2C_PeriClockControl+0xac>)
 80009b6:	4293      	cmp	r3, r2
 80009b8:	d126      	bne.n	8000a08 <I2C_PeriClockControl+0x94>
					I2C3_PCLK_EN();
 80009ba:	4b17      	ldr	r3, [pc, #92]	; (8000a18 <I2C_PeriClockControl+0xa4>)
 80009bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009be:	4a16      	ldr	r2, [pc, #88]	; (8000a18 <I2C_PeriClockControl+0xa4>)
 80009c0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80009c4:	6413      	str	r3, [r2, #64]	; 0x40
}
 80009c6:	e01f      	b.n	8000a08 <I2C_PeriClockControl+0x94>
			if(pI2Cx==I2C1)
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	4a12      	ldr	r2, [pc, #72]	; (8000a14 <I2C_PeriClockControl+0xa0>)
 80009cc:	4293      	cmp	r3, r2
 80009ce:	d106      	bne.n	80009de <I2C_PeriClockControl+0x6a>
				I2C1_PCLK_DN();
 80009d0:	4b11      	ldr	r3, [pc, #68]	; (8000a18 <I2C_PeriClockControl+0xa4>)
 80009d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009d4:	4a10      	ldr	r2, [pc, #64]	; (8000a18 <I2C_PeriClockControl+0xa4>)
 80009d6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80009da:	6413      	str	r3, [r2, #64]	; 0x40
}
 80009dc:	e014      	b.n	8000a08 <I2C_PeriClockControl+0x94>
			}else if(pI2Cx==I2C2)
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	4a0e      	ldr	r2, [pc, #56]	; (8000a1c <I2C_PeriClockControl+0xa8>)
 80009e2:	4293      	cmp	r3, r2
 80009e4:	d106      	bne.n	80009f4 <I2C_PeriClockControl+0x80>
				I2C2_PCLK_DN();
 80009e6:	4b0c      	ldr	r3, [pc, #48]	; (8000a18 <I2C_PeriClockControl+0xa4>)
 80009e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ea:	4a0b      	ldr	r2, [pc, #44]	; (8000a18 <I2C_PeriClockControl+0xa4>)
 80009ec:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80009f0:	6413      	str	r3, [r2, #64]	; 0x40
}
 80009f2:	e009      	b.n	8000a08 <I2C_PeriClockControl+0x94>
			}else if(pI2Cx==I2C3)
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	4a0a      	ldr	r2, [pc, #40]	; (8000a20 <I2C_PeriClockControl+0xac>)
 80009f8:	4293      	cmp	r3, r2
 80009fa:	d105      	bne.n	8000a08 <I2C_PeriClockControl+0x94>
				I2C3_PCLK_DN();
 80009fc:	4b06      	ldr	r3, [pc, #24]	; (8000a18 <I2C_PeriClockControl+0xa4>)
 80009fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a00:	4a05      	ldr	r2, [pc, #20]	; (8000a18 <I2C_PeriClockControl+0xa4>)
 8000a02:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000a06:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000a08:	bf00      	nop
 8000a0a:	370c      	adds	r7, #12
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a12:	4770      	bx	lr
 8000a14:	40005400 	.word	0x40005400
 8000a18:	40023800 	.word	0x40023800
 8000a1c:	40005800 	.word	0x40005800
 8000a20:	40005c00 	.word	0x40005c00

08000a24 <RCC_GetPCLK1Value>:

uint32_t RCC_GetPCLK1Value(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b084      	sub	sp, #16
 8000a28:	af00      	add	r7, sp, #0
	uint32_t pclk1,SystemClk;

	uint8_t clksrc, temp, ahbp, apb1;

	clksrc = ( ( RCC->CFGR >> 2 ) & 0X3); // CHANGE THE BIT POSISTION OF 2. AND 3. BİTS TO 0. AND 1.
 8000a2a:	4b25      	ldr	r3, [pc, #148]	; (8000ac0 <RCC_GetPCLK1Value+0x9c>)
 8000a2c:	689b      	ldr	r3, [r3, #8]
 8000a2e:	089b      	lsrs	r3, r3, #2
 8000a30:	b2db      	uxtb	r3, r3
 8000a32:	f003 0303 	and.w	r3, r3, #3
 8000a36:	727b      	strb	r3, [r7, #9]
										  //AND USE AND 11 TO INDENTIFY THE VALUE
	if( clksrc ==0)
 8000a38:	7a7b      	ldrb	r3, [r7, #9]
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d102      	bne.n	8000a44 <RCC_GetPCLK1Value+0x20>
	{
		SystemClk = 16000000; //HSI
 8000a3e:	4b21      	ldr	r3, [pc, #132]	; (8000ac4 <RCC_GetPCLK1Value+0xa0>)
 8000a40:	60fb      	str	r3, [r7, #12]
 8000a42:	e00b      	b.n	8000a5c <RCC_GetPCLK1Value+0x38>
	}else if(clksrc ==1)
 8000a44:	7a7b      	ldrb	r3, [r7, #9]
 8000a46:	2b01      	cmp	r3, #1
 8000a48:	d102      	bne.n	8000a50 <RCC_GetPCLK1Value+0x2c>
	{
		SystemClk = 8000000; //HSE
 8000a4a:	4b1f      	ldr	r3, [pc, #124]	; (8000ac8 <RCC_GetPCLK1Value+0xa4>)
 8000a4c:	60fb      	str	r3, [r7, #12]
 8000a4e:	e005      	b.n	8000a5c <RCC_GetPCLK1Value+0x38>
	}else if(clksrc ==2)
 8000a50:	7a7b      	ldrb	r3, [r7, #9]
 8000a52:	2b02      	cmp	r3, #2
 8000a54:	d102      	bne.n	8000a5c <RCC_GetPCLK1Value+0x38>
	{
		SystemClk = RCC_GetPLLOutputClock(); //PLL didn't write
 8000a56:	f000 f83d 	bl	8000ad4 <RCC_GetPLLOutputClock>
 8000a5a:	60f8      	str	r0, [r7, #12]
	}
	//ahb
	temp = ((RCC -> CFGR >> 4 ) & 0XF);
 8000a5c:	4b18      	ldr	r3, [pc, #96]	; (8000ac0 <RCC_GetPCLK1Value+0x9c>)
 8000a5e:	689b      	ldr	r3, [r3, #8]
 8000a60:	091b      	lsrs	r3, r3, #4
 8000a62:	b2db      	uxtb	r3, r3
 8000a64:	f003 030f 	and.w	r3, r3, #15
 8000a68:	723b      	strb	r3, [r7, #8]

	if(temp < 8)
 8000a6a:	7a3b      	ldrb	r3, [r7, #8]
 8000a6c:	2b07      	cmp	r3, #7
 8000a6e:	d802      	bhi.n	8000a76 <RCC_GetPCLK1Value+0x52>
	{
		ahbp = 1;
 8000a70:	2301      	movs	r3, #1
 8000a72:	72fb      	strb	r3, [r7, #11]
 8000a74:	e005      	b.n	8000a82 <RCC_GetPCLK1Value+0x5e>
	}else
	{
		ahbp = AHB_PreScaler[temp-8];
 8000a76:	7a3b      	ldrb	r3, [r7, #8]
 8000a78:	3b08      	subs	r3, #8
 8000a7a:	4a14      	ldr	r2, [pc, #80]	; (8000acc <RCC_GetPCLK1Value+0xa8>)
 8000a7c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a80:	72fb      	strb	r3, [r7, #11]
	}
	//apb1
	temp = ((RCC -> CFGR >> 10 ) & 0x7);
 8000a82:	4b0f      	ldr	r3, [pc, #60]	; (8000ac0 <RCC_GetPCLK1Value+0x9c>)
 8000a84:	689b      	ldr	r3, [r3, #8]
 8000a86:	0a9b      	lsrs	r3, r3, #10
 8000a88:	b2db      	uxtb	r3, r3
 8000a8a:	f003 0307 	and.w	r3, r3, #7
 8000a8e:	723b      	strb	r3, [r7, #8]

	if(temp < 4)
 8000a90:	7a3b      	ldrb	r3, [r7, #8]
 8000a92:	2b03      	cmp	r3, #3
 8000a94:	d802      	bhi.n	8000a9c <RCC_GetPCLK1Value+0x78>
	{
		apb1 = 1;
 8000a96:	2301      	movs	r3, #1
 8000a98:	72bb      	strb	r3, [r7, #10]
 8000a9a:	e004      	b.n	8000aa6 <RCC_GetPCLK1Value+0x82>
	}else
	{
		apb1 = APB1_PreScaler[temp-4];
 8000a9c:	7a3b      	ldrb	r3, [r7, #8]
 8000a9e:	3b04      	subs	r3, #4
 8000aa0:	4a0b      	ldr	r2, [pc, #44]	; (8000ad0 <RCC_GetPCLK1Value+0xac>)
 8000aa2:	5cd3      	ldrb	r3, [r2, r3]
 8000aa4:	72bb      	strb	r3, [r7, #10]
	}


	pclk1 = (SystemClk / ahbp)/ apb1;
 8000aa6:	7afb      	ldrb	r3, [r7, #11]
 8000aa8:	68fa      	ldr	r2, [r7, #12]
 8000aaa:	fbb2 f2f3 	udiv	r2, r2, r3
 8000aae:	7abb      	ldrb	r3, [r7, #10]
 8000ab0:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ab4:	607b      	str	r3, [r7, #4]

	return pclk1;
 8000ab6:	687b      	ldr	r3, [r7, #4]

}
 8000ab8:	4618      	mov	r0, r3
 8000aba:	3710      	adds	r7, #16
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	40023800 	.word	0x40023800
 8000ac4:	00f42400 	.word	0x00f42400
 8000ac8:	007a1200 	.word	0x007a1200
 8000acc:	20000020 	.word	0x20000020
 8000ad0:	20000030 	.word	0x20000030

08000ad4 <RCC_GetPLLOutputClock>:
uint32_t RCC_GetPLLOutputClock(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0

	return 0;
 8000ad8:	2300      	movs	r3, #0
}
 8000ada:	4618      	mov	r0, r3
 8000adc:	46bd      	mov	sp, r7
 8000ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae2:	4770      	bx	lr

08000ae4 <I2C_Init>:
 * @return            -
 *
 * @Note              -
 */
void I2C_Init(I2C_Handle_t *pI2CHandle)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b084      	sub	sp, #16
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]

	uint32_t tempreg = 0;
 8000aec:	2300      	movs	r3, #0
 8000aee:	60fb      	str	r3, [r7, #12]

	//enable teh clock for I2C peripheral
	I2C_PeriClockControl(pI2CHandle ->pI2Cx, ENABLE);
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	2101      	movs	r1, #1
 8000af6:	4618      	mov	r0, r3
 8000af8:	f7ff ff3c 	bl	8000974 <I2C_PeriClockControl>
	//I2C_PeripheralControl(I2C1,ENABLE);
	// ack control bit
	tempreg |= pI2CHandle -> I2C_Config.I2C_AckControl << 10;
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	7a5b      	ldrb	r3, [r3, #9]
 8000b00:	029b      	lsls	r3, r3, #10
 8000b02:	461a      	mov	r2, r3
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	4313      	orrs	r3, r2
 8000b08:	60fb      	str	r3, [r7, #12]
	pI2CHandle -> pI2Cx ->CR1 |= tempreg;
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	6819      	ldr	r1, [r3, #0]
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	68fa      	ldr	r2, [r7, #12]
 8000b16:	430a      	orrs	r2, r1
 8000b18:	601a      	str	r2, [r3, #0]

	//configure the FREQ  field of CR2
	tempreg =0;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	60fb      	str	r3, [r7, #12]
	tempreg |= RCC_GetPCLK1Value() / 1000000U ; // e.g. 16MHz
 8000b1e:	f7ff ff81 	bl	8000a24 <RCC_GetPCLK1Value>
 8000b22:	4602      	mov	r2, r0
 8000b24:	4b4e      	ldr	r3, [pc, #312]	; (8000c60 <I2C_Init+0x17c>)
 8000b26:	fba3 2302 	umull	r2, r3, r3, r2
 8000b2a:	0c9b      	lsrs	r3, r3, #18
 8000b2c:	68fa      	ldr	r2, [r7, #12]
 8000b2e:	4313      	orrs	r3, r2
 8000b30:	60fb      	str	r3, [r7, #12]
	pI2CHandle -> pI2Cx -> CR2 |= (tempreg & 0x3f); //mask all the bits accept first 5 bits
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	6859      	ldr	r1, [r3, #4]
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	430a      	orrs	r2, r1
 8000b44:	605a      	str	r2, [r3, #4]

	//program the device own address
	tempreg =0;
 8000b46:	2300      	movs	r3, #0
 8000b48:	60fb      	str	r3, [r7, #12]
	tempreg |= pI2CHandle -> I2C_Config.I2C_DeviceAddress << 1;
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	7a1b      	ldrb	r3, [r3, #8]
 8000b4e:	005b      	lsls	r3, r3, #1
 8000b50:	461a      	mov	r2, r3
 8000b52:	68fb      	ldr	r3, [r7, #12]
 8000b54:	4313      	orrs	r3, r2
 8000b56:	60fb      	str	r3, [r7, #12]
	tempreg |= (1 << 14);
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b5e:	60fb      	str	r3, [r7, #12]
	pI2CHandle-> pI2Cx -> OAR1 |= tempreg;
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	6899      	ldr	r1, [r3, #8]
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	68fa      	ldr	r2, [r7, #12]
 8000b6c:	430a      	orrs	r2, r1
 8000b6e:	609a      	str	r2, [r3, #8]

	//CCR Calculations
	uint16_t ccr_value =0;
 8000b70:	2300      	movs	r3, #0
 8000b72:	817b      	strh	r3, [r7, #10]
	tempreg =0;
 8000b74:	2300      	movs	r3, #0
 8000b76:	60fb      	str	r3, [r7, #12]
	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM)
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	685b      	ldr	r3, [r3, #4]
 8000b7c:	4a39      	ldr	r2, [pc, #228]	; (8000c64 <I2C_Init+0x180>)
 8000b7e:	4293      	cmp	r3, r2
 8000b80:	d80f      	bhi.n	8000ba2 <I2C_Init+0xbe>
	{
		//MODE is standard mode
		ccr_value = (RCC_GetPCLK1Value() / (2 * pI2CHandle -> I2C_Config.I2C_SCLSpeed) );
 8000b82:	f7ff ff4f 	bl	8000a24 <RCC_GetPCLK1Value>
 8000b86:	4602      	mov	r2, r0
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	685b      	ldr	r3, [r3, #4]
 8000b8c:	005b      	lsls	r3, r3, #1
 8000b8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b92:	817b      	strh	r3, [r7, #10]
		tempreg |= (ccr_value & 0xfff); //mask all the bits accept first 12 bits
 8000b94:	897b      	ldrh	r3, [r7, #10]
 8000b96:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000b9a:	68fa      	ldr	r2, [r7, #12]
 8000b9c:	4313      	orrs	r3, r2
 8000b9e:	60fb      	str	r3, [r7, #12]
 8000ba0:	e031      	b.n	8000c06 <I2C_Init+0x122>

	}else
	{
		//fast modes
		tempreg |= (1 << 15);
 8000ba2:	68fb      	ldr	r3, [r7, #12]
 8000ba4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000ba8:	60fb      	str	r3, [r7, #12]
		tempreg |=( pI2CHandle -> I2C_Config.I2C_FMDutyCycle << 14 ) ;
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	7a9b      	ldrb	r3, [r3, #10]
 8000bae:	039b      	lsls	r3, r3, #14
 8000bb0:	461a      	mov	r2, r3
 8000bb2:	68fb      	ldr	r3, [r7, #12]
 8000bb4:	4313      	orrs	r3, r2
 8000bb6:	60fb      	str	r3, [r7, #12]
		if( pI2CHandle -> I2C_Config.I2C_FMDutyCycle == I2C_FM_DUTY_2) //0
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	7a9b      	ldrb	r3, [r3, #10]
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d10b      	bne.n	8000bd8 <I2C_Init+0xf4>
		{
			ccr_value = (RCC_GetPCLK1Value() / (3 * pI2CHandle -> I2C_Config.I2C_SCLSpeed) );
 8000bc0:	f7ff ff30 	bl	8000a24 <RCC_GetPCLK1Value>
 8000bc4:	4601      	mov	r1, r0
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	685a      	ldr	r2, [r3, #4]
 8000bca:	4613      	mov	r3, r2
 8000bcc:	005b      	lsls	r3, r3, #1
 8000bce:	4413      	add	r3, r2
 8000bd0:	fbb1 f3f3 	udiv	r3, r1, r3
 8000bd4:	817b      	strh	r3, [r7, #10]
 8000bd6:	e010      	b.n	8000bfa <I2C_Init+0x116>


		}else if( pI2CHandle -> I2C_Config.I2C_FMDutyCycle == I2C_FM_DUTY_16_9) //1
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	7a9b      	ldrb	r3, [r3, #10]
 8000bdc:	2b01      	cmp	r3, #1
 8000bde:	d10c      	bne.n	8000bfa <I2C_Init+0x116>
		{
			ccr_value = (RCC_GetPCLK1Value() / (25 * pI2CHandle -> I2C_Config.I2C_SCLSpeed) );
 8000be0:	f7ff ff20 	bl	8000a24 <RCC_GetPCLK1Value>
 8000be4:	4601      	mov	r1, r0
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	685a      	ldr	r2, [r3, #4]
 8000bea:	4613      	mov	r3, r2
 8000bec:	009b      	lsls	r3, r3, #2
 8000bee:	4413      	add	r3, r2
 8000bf0:	009a      	lsls	r2, r3, #2
 8000bf2:	4413      	add	r3, r2
 8000bf4:	fbb1 f3f3 	udiv	r3, r1, r3
 8000bf8:	817b      	strh	r3, [r7, #10]

		}
		tempreg |= (ccr_value & 0xfff); //mask all the bits accept first 12 bits
 8000bfa:	897b      	ldrh	r3, [r7, #10]
 8000bfc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000c00:	68fa      	ldr	r2, [r7, #12]
 8000c02:	4313      	orrs	r3, r2
 8000c04:	60fb      	str	r3, [r7, #12]
	}
	pI2CHandle -> pI2Cx -> CCR =tempreg;
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	68fa      	ldr	r2, [r7, #12]
 8000c0c:	61da      	str	r2, [r3, #28]
	tempreg =0;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	60fb      	str	r3, [r7, #12]
	//Trise Configuration
	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM)
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	685b      	ldr	r3, [r3, #4]
 8000c16:	4a13      	ldr	r2, [pc, #76]	; (8000c64 <I2C_Init+0x180>)
 8000c18:	4293      	cmp	r3, r2
 8000c1a:	d809      	bhi.n	8000c30 <I2C_Init+0x14c>
	{
		//MODE is standard mode
		tempreg =( RCC_GetPCLK1Value() / 1000000U) +1;
 8000c1c:	f7ff ff02 	bl	8000a24 <RCC_GetPCLK1Value>
 8000c20:	4602      	mov	r2, r0
 8000c22:	4b0f      	ldr	r3, [pc, #60]	; (8000c60 <I2C_Init+0x17c>)
 8000c24:	fba3 2302 	umull	r2, r3, r3, r2
 8000c28:	0c9b      	lsrs	r3, r3, #18
 8000c2a:	3301      	adds	r3, #1
 8000c2c:	60fb      	str	r3, [r7, #12]
 8000c2e:	e00d      	b.n	8000c4c <I2C_Init+0x168>
	}
	else
	{
		tempreg =(( RCC_GetPCLK1Value() *300)/1000000000U) +1;
 8000c30:	f7ff fef8 	bl	8000a24 <RCC_GetPCLK1Value>
 8000c34:	4602      	mov	r2, r0
 8000c36:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8000c3a:	fb03 f302 	mul.w	r3, r3, r2
 8000c3e:	0a5b      	lsrs	r3, r3, #9
 8000c40:	4a09      	ldr	r2, [pc, #36]	; (8000c68 <I2C_Init+0x184>)
 8000c42:	fba2 2303 	umull	r2, r3, r2, r3
 8000c46:	09db      	lsrs	r3, r3, #7
 8000c48:	3301      	adds	r3, #1
 8000c4a:	60fb      	str	r3, [r7, #12]
	}

	pI2CHandle -> pI2Cx -> TRISE = (tempreg & 0X3F);
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	68fa      	ldr	r2, [r7, #12]
 8000c52:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000c56:	621a      	str	r2, [r3, #32]

}
 8000c58:	bf00      	nop
 8000c5a:	3710      	adds	r7, #16
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	431bde83 	.word	0x431bde83
 8000c64:	000186a0 	.word	0x000186a0
 8000c68:	00044b83 	.word	0x00044b83

08000c6c <I2C_GetFlagStatus>:

}


uint8_t I2C_GetFlagStatus(I2C_RegDef_t *pI2Cx, uint32_t FlagName)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b083      	sub	sp, #12
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
 8000c74:	6039      	str	r1, [r7, #0]
	if(pI2Cx ->SR1 & FlagName)
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	695a      	ldr	r2, [r3, #20]
 8000c7a:	683b      	ldr	r3, [r7, #0]
 8000c7c:	4013      	ands	r3, r2
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d001      	beq.n	8000c86 <I2C_GetFlagStatus+0x1a>
	{
		return FLAG_SET;
 8000c82:	2301      	movs	r3, #1
 8000c84:	e000      	b.n	8000c88 <I2C_GetFlagStatus+0x1c>
	}
	return FLAG_RESET;
 8000c86:	2300      	movs	r3, #0

}
 8000c88:	4618      	mov	r0, r3
 8000c8a:	370c      	adds	r7, #12
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c92:	4770      	bx	lr

08000c94 <I2C_MasterSendData>:
 * @return            -
 *
 * @Note              -
 */
void I2C_MasterSendData(I2C_Handle_t *pI2CHandle,uint8_t *pTxBuffer, uint32_t Len, uint8_t  SlaveAddr)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b084      	sub	sp, #16
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	60f8      	str	r0, [r7, #12]
 8000c9c:	60b9      	str	r1, [r7, #8]
 8000c9e:	607a      	str	r2, [r7, #4]
 8000ca0:	70fb      	strb	r3, [r7, #3]
	// 1. Generate the START condition
	I2C_GenerateStartCondition(pI2CHandle-> pI2Cx);
 8000ca2:	68fb      	ldr	r3, [r7, #12]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f7ff fe02 	bl	80008b0 <I2C_GenerateStartCondition>
	//2. confirm that start generation is completed by checking the SB flag in the SR1
	//   Note: Until SB is cleared SCL will be stretched (pulled to LOW)
	while(! I2C_GetFlagStatus(pI2CHandle-> pI2Cx, I2C_FLAG_SB ));
 8000cac:	bf00      	nop
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	2101      	movs	r1, #1
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f7ff ffd9 	bl	8000c6c <I2C_GetFlagStatus>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d0f6      	beq.n	8000cae <I2C_MasterSendData+0x1a>
	//3. Send the address of the slave with r/nw bit set to w(0) (total 8 bits )
	I2C_ExecuteAddressPhase(pI2CHandle -> pI2Cx, SlaveAddr);
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	78fa      	ldrb	r2, [r7, #3]
 8000cc6:	4611      	mov	r1, r2
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f7ff fe01 	bl	80008d0 <I2C_ExecuteAddressPhase>
	//4. Confirm that address phase is completed by checking the ADDR flag in the SR1
	while(! I2C_GetFlagStatus(pI2CHandle-> pI2Cx, I2C_FLAG_ADDR ));
 8000cce:	bf00      	nop
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	2102      	movs	r1, #2
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f7ff ffc8 	bl	8000c6c <I2C_GetFlagStatus>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d0f6      	beq.n	8000cd0 <I2C_MasterSendData+0x3c>
	//5. clear the ADDR flag according to its software sequence
	I2C_ClearADDRFlag(pI2CHandle-> pI2Cx);
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f7ff fe08 	bl	80008fc <I2C_ClearADDRFlag>
	//6. send the data until len becomes 0
	while(Len> 0)
 8000cec:	e014      	b.n	8000d18 <I2C_MasterSendData+0x84>
	{
		while(! I2C_GetFlagStatus(pI2CHandle-> pI2Cx, I2C_FLAG_TXE ));
 8000cee:	bf00      	nop
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	2180      	movs	r1, #128	; 0x80
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f7ff ffb8 	bl	8000c6c <I2C_GetFlagStatus>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d0f6      	beq.n	8000cf0 <I2C_MasterSendData+0x5c>
		pI2CHandle -> pI2Cx-> DR = *pTxBuffer;
 8000d02:	68bb      	ldr	r3, [r7, #8]
 8000d04:	781a      	ldrb	r2, [r3, #0]
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	611a      	str	r2, [r3, #16]
		pTxBuffer++;
 8000d0c:	68bb      	ldr	r3, [r7, #8]
 8000d0e:	3301      	adds	r3, #1
 8000d10:	60bb      	str	r3, [r7, #8]
		Len--;
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	3b01      	subs	r3, #1
 8000d16:	607b      	str	r3, [r7, #4]
	while(Len> 0)
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d1e7      	bne.n	8000cee <I2C_MasterSendData+0x5a>
	}
	//7. when Len becomes zero wait for TXE=1 and BTF=1 before generating the STOP condition
	//   Note: TXE=1 , BTF=1 , means that both SR and DR are empty and next transmission should begin
	//   when BTF=1 SCL will be stretched (pulled to LOW)
	while(! I2C_GetFlagStatus(pI2CHandle-> pI2Cx, I2C_FLAG_TXE ));
 8000d1e:	bf00      	nop
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	2180      	movs	r1, #128	; 0x80
 8000d26:	4618      	mov	r0, r3
 8000d28:	f7ff ffa0 	bl	8000c6c <I2C_GetFlagStatus>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d0f6      	beq.n	8000d20 <I2C_MasterSendData+0x8c>

	while(! I2C_GetFlagStatus(pI2CHandle-> pI2Cx, I2C_FLAG_BTF ));
 8000d32:	bf00      	nop
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	2104      	movs	r1, #4
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f7ff ff96 	bl	8000c6c <I2C_GetFlagStatus>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d0f6      	beq.n	8000d34 <I2C_MasterSendData+0xa0>

	//8. Generate STOP condition and master need not to wait for the completion of stop condition.
	//   Note: generating STOP, automatically clears the BTF
	I2C_GenerateStopCondition(pI2CHandle-> pI2Cx);
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f7ff fde6 	bl	800091c <I2C_GenerateStopCondition>
}
 8000d50:	bf00      	nop
 8000d52:	3710      	adds	r7, #16
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}

08000d58 <__libc_init_array>:
 8000d58:	b570      	push	{r4, r5, r6, lr}
 8000d5a:	4e0d      	ldr	r6, [pc, #52]	; (8000d90 <__libc_init_array+0x38>)
 8000d5c:	4c0d      	ldr	r4, [pc, #52]	; (8000d94 <__libc_init_array+0x3c>)
 8000d5e:	1ba4      	subs	r4, r4, r6
 8000d60:	10a4      	asrs	r4, r4, #2
 8000d62:	2500      	movs	r5, #0
 8000d64:	42a5      	cmp	r5, r4
 8000d66:	d109      	bne.n	8000d7c <__libc_init_array+0x24>
 8000d68:	4e0b      	ldr	r6, [pc, #44]	; (8000d98 <__libc_init_array+0x40>)
 8000d6a:	4c0c      	ldr	r4, [pc, #48]	; (8000d9c <__libc_init_array+0x44>)
 8000d6c:	f000 f818 	bl	8000da0 <_init>
 8000d70:	1ba4      	subs	r4, r4, r6
 8000d72:	10a4      	asrs	r4, r4, #2
 8000d74:	2500      	movs	r5, #0
 8000d76:	42a5      	cmp	r5, r4
 8000d78:	d105      	bne.n	8000d86 <__libc_init_array+0x2e>
 8000d7a:	bd70      	pop	{r4, r5, r6, pc}
 8000d7c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000d80:	4798      	blx	r3
 8000d82:	3501      	adds	r5, #1
 8000d84:	e7ee      	b.n	8000d64 <__libc_init_array+0xc>
 8000d86:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000d8a:	4798      	blx	r3
 8000d8c:	3501      	adds	r5, #1
 8000d8e:	e7f2      	b.n	8000d76 <__libc_init_array+0x1e>
 8000d90:	08000db8 	.word	0x08000db8
 8000d94:	08000db8 	.word	0x08000db8
 8000d98:	08000db8 	.word	0x08000db8
 8000d9c:	08000dbc 	.word	0x08000dbc

08000da0 <_init>:
 8000da0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000da2:	bf00      	nop
 8000da4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000da6:	bc08      	pop	{r3}
 8000da8:	469e      	mov	lr, r3
 8000daa:	4770      	bx	lr

08000dac <_fini>:
 8000dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000dae:	bf00      	nop
 8000db0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000db2:	bc08      	pop	{r3}
 8000db4:	469e      	mov	lr, r3
 8000db6:	4770      	bx	lr
